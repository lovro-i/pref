package edu.drexel.cs.db.db4pref.model;

import edu.drexel.cs.db.db4pref.distance.KendallTauDistance;
import edu.drexel.cs.db.db4pref.core.ItemSet;
import edu.drexel.cs.db.db4pref.core.MapPreferenceSet;
import edu.drexel.cs.db.db4pref.core.MutablePreferenceSet;
import edu.drexel.cs.db.db4pref.core.Preference;
import edu.drexel.cs.db.db4pref.core.PreferenceSet;
import edu.drexel.cs.db.db4pref.core.Ranking;
import edu.drexel.cs.db.db4pref.core.RankingSample;
import edu.drexel.cs.db.db4pref.core.Sample.PW;
import edu.drexel.cs.db.db4pref.util.Logger;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;


public class MallowsModel {

  private final Ranking center;
  private final double phi;
  
  public MallowsModel(Ranking center, double phi) {
    this.center = center;
    this.phi = phi;
  }

  public ItemSet getItemSet() {
    return this.center.getItemSet();
  }

  public Ranking getCenter() {
    return center;
  }

  public double getPhi() {
    return phi;
  }
  
  /** Expected distance from the center, depends only on phi */
  public double getE() {
    return phiToE(phi);
  }

  @Override
  public boolean equals(Object obj) {
    if (!(obj instanceof MallowsModel)) return false;
    MallowsModel mm = (MallowsModel) obj;
    return this.center.equals(mm.center) && this.phi == mm.phi;
  }

  @Override
  public String toString() {
    return "Center: " + center + "; phi: " + phi;
  }
  
  /** Convert phi to expected distance */
  public static double phiToE(double phi) {
    return phi / (1 - phi);
  }
  
  /** Convert expected distance to phi */
  public static double eToPhi(double e) {
    return e / (e+1);
  }
  
  /** Normalization factor */
  public double z() {
    double z = 1;
    double s = 1;
    double phip = 1;
    for (int i = 1; i < this.getItemSet().size(); i++) {
      phip *= phi;
      s += phip;
      z *= s;
    }
    return z;
  }
  
  
  /** @return Probability of the ranking being generated by this model */
  public double getProbability(Ranking r) {
    double d = KendallTauDistance.between(center, r);
    return Math.pow(phi, d) / z();
  }
  
  
  public double getLogProbability(Ranking r) {
    double d = KendallTauDistance.between(center, r);
    return d * Math.log(phi) - Math.log(z());
  }
    
    
  public double getLogLikelihood(RankingSample sample) {
    double ll = 0;
    double lnZ = Math.log(z());
    double lnPhi = Math.log(phi);
    for (PW<Ranking> pw: sample) {
      ll += pw.w * (KendallTauDistance.between(center, pw.p) * lnPhi - lnZ);
    }
    return ll / sample.sumWeights();
  }

  /** Upper probability bound on normalization constant, Lu & Boutilier, Theorem 17 */
  public double getUpperBound(PreferenceSet pref) {
    MutablePreferenceSet tcPref = pref.transitiveClosure();
    int d = 0;
    int s = 0;
    for (Preference p: tcPref.getPreferences()) {
      if (center.contains(p)) s++;
      else d++;
    }
    
    double ub = Math.pow(phi, d) * Math.pow((1 + phi), this.center.size() - s - d);
    return ub;
  }
    
  public static void main(String[] args) {
    Random random = new Random();
    ItemSet items = new ItemSet(10);
    MallowsModel model = new MallowsModel(items.getReferenceRanking(), 0.2);
    Ranking r = model.getItemSet().getRandomRanking();
    List<Preference> pset = new ArrayList<>(r.transitiveClosure().getPreferences());
    int size = (int) (0.8 * pset.size());
    while (pset.size() > size) {
      pset.remove(random.nextInt(pset.size()));
    }
    
    MapPreferenceSet pref = new MapPreferenceSet(items);
    for (Preference p: pset) pref.add(p.higher, p.lower);
    
    double p = 0;
    for (Ranking r1: pref.getRankings()) {
      p += model.getProbability(r1);
    }
    
    double ub = model.getUpperBound(pref);
    Logger.info("P = %f, UB = %f, UB/Z = %f", Math.log(p), Math.log(ub), Math.log(ub/model.z()));
  }
  
}
